{"version":3,"file":"component---src-pages-sortings-jsx-f11330a1259da82296f8.js","mappings":"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","sources":["webpack://portfolio/./src/components/SortAnimation/constants.js","webpack://portfolio/./src/components/SortAnimation/SortAnimation.module.scss","webpack://portfolio/./src/components/SortAnimation/SortAnimation.jsx","webpack://portfolio/./src/components/SortAnimation/variables.js","webpack://portfolio/./src/components/SortPlayer/constants.js","webpack://portfolio/./src/components/SortPlayer/variables.js","webpack://portfolio/./src/components/SortPlayer/SortPlayer.module.scss","webpack://portfolio/./src/components/SortPlayer/PlayerButtonsContainer.jsx","webpack://portfolio/./src/components/SortPlayer/SortPlayer.jsx","webpack://portfolio/./src/pages/sortings.jsx"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\nexport const springTransition = {\n  type: 'spring',\n  damping: 25,\n  stiffness: 150,\n};\n","// extracted by mini-css-extract-plugin\nexport var barsContainer4 = \"SortAnimation-module--barsContainer4--49Etq\";\nexport var barsContainer8 = \"SortAnimation-module--barsContainer8--l6eea\";\nexport var barsContainer16 = \"SortAnimation-module--barsContainer16--9RvQa\";\nexport var barsContainer32 = \"SortAnimation-module--barsContainer32--mP5Hu\";\nexport var barsContainer64 = \"SortAnimation-module--barsContainer64--FYorn\";\nexport var li = \"SortAnimation-module--li--bZDfV\";","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { motion } from 'framer-motion';\n\nimport { springTransition } from './constants';\nimport { getVariants } from './variables';\n\nimport * as styles from './SortAnimation.module.scss';\n\nexport default function SortAnimation({\n  algorithm,\n  startSorting,\n  initialValues,\n  previousValues,\n  handleSortFinish,\n}) {\n  const [sortBars, setSortBars] = useState(initialValues);\n  const [timeouts, setTimeouts] = useState([]);\n\n  const handleSetBars = (bars) => {\n    setSortBars(bars);\n  };\n\n  const handleSetTimeouts = (newTimeouts) => {\n    setTimeouts(newTimeouts);\n  };\n\n  useEffect(() => {\n    if (startSorting) {\n      const handlers = {\n        handleSetBars,\n        handleSetTimeouts,\n        handleSortFinish,\n      };\n\n      algorithm.sort(sortBars, handlers);\n    } else {\n      timeouts.forEach((timeout) => clearTimeout(timeout));\n      setSortBars(initialValues);\n      handleSortFinish(false);\n    }\n  }, [startSorting, initialValues]);\n\n  return (\n    <ul className={styles[`barsContainer${initialValues.length}`]}>\n      {sortBars?.map((bar) => (\n        <motion.li\n          key={bar.id}\n          layout\n          custom={bar.id}\n          variants={getVariants(initialValues, previousValues)}\n          initial=\"previous\"\n          animate=\"current\"\n          transition={springTransition}\n          style={{ background: bar.color }}\n        />\n      ))}\n    </ul>\n  );\n}\n\nSortAnimation.propTypes = {\n  algorithm: PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    complexity: PropTypes.string.isRequired,\n    sort: PropTypes.func.isRequired,\n  }).isRequired,\n  startSorting: PropTypes.bool.isRequired,\n  initialValues: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  previousValues: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      value: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  handleSortFinish: PropTypes.func.isRequired,\n};\n","/* eslint-disable import/prefer-default-export */\nexport const getVariants = (current, previous) => ({\n  previous: (i) => ({\n    height: previous.find((value) => value?.id === i)?.value / 22 || 0,\n    transition: { duration: 0.5 },\n  }),\n  current: (i) => ({\n    height: current.find((value) => value?.id === i)?.value / 22 || 0,\n    transition: { duration: 0.5 },\n  }),\n});\n","import { nanoid } from 'nanoid';\nimport colors from 'shared/colors';\n\nexport const barColors = [\n  colors.brightPink,\n  colors.darkPink,\n  colors.brightPurple,\n  colors.darkPurple,\n];\n\nexport const MAX_NUMBER_OF_BARS = 64;\n\nexport const constantIds = [...Array(MAX_NUMBER_OF_BARS)].map(() => nanoid());\n\nexport const BAR_NUMBER_ACTIONS = {\n  INCREASE: 'INCREASE',\n  DECREASE: 'DECREASE',\n};\n\nexport const SORTED_ARRAY_TYPE = {\n  INCREASING: 'INCREASING',\n  DECREASING: 'DECREASING',\n};\n","import { faPlay, faRedo, faStop } from '@fortawesome/free-solid-svg-icons';\n\nimport { barColors, constantIds, SORTED_ARRAY_TYPE } from './constants';\n\nconst getElements = (level) => {\n  switch (level) {\n    case 1:\n      return 4;\n    case 2:\n      return 8;\n    case 3:\n      return 16;\n    case 4:\n      return 32;\n    case 5:\n    default:\n      return 64;\n  }\n};\n\nexport const getRandomValues = (numberOfValues) => {\n  const elements = getElements(numberOfValues);\n\n  return [...Array(elements)].map((_, index) => ({\n    id: constantIds[index],\n    color: barColors[1],\n    value: Math.floor(Math.random() * 10000),\n  }));\n};\n\nexport const getSorted = (numberOfValues, type) => {\n  const newValues = getRandomValues(numberOfValues);\n\n  return newValues.sort((barA, barB) => {\n    if (barA.value < barB.value) {\n      return type === SORTED_ARRAY_TYPE.INCREASING ? -1 : 1;\n    }\n    return type === SORTED_ARRAY_TYPE.INCREASING ? 1 : -1;\n  });\n};\n\nexport const getPlayIcon = (isSortFinished, startSorting) => {\n  if (isSortFinished) {\n    return faRedo;\n  }\n  if (startSorting) {\n    return faStop;\n  }\n  return faPlay;\n};\n","// extracted by mini-css-extract-plugin\nexport var cardContainer = \"SortPlayer-module--cardContainer--0dejD\";\nexport var animationContainer = \"SortPlayer-module--animationContainer--0NpM2\";\nexport var playerButton = \"SortPlayer-module--playerButton--i1FIn\";\nexport var legendContainer = \"SortPlayer-module--legendContainer--TqcEJ\";\nexport var colorPreview = \"SortPlayer-module--colorPreview--DEFJN\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Center } from '@chakra-ui/layout';\nimport { Button } from '@chakra-ui/react';\nimport {\n  faMinus,\n  faPlus,\n  faRandom,\n  faSortAmountDown,\n  faSortAmountUp,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { getPlayIcon, getRandomValues, getSorted } from './variables';\n\nimport * as styles from './SortPlayer.module.scss';\nimport { BAR_NUMBER_ACTIONS, SORTED_ARRAY_TYPE } from './constants';\n\nexport default function PlayerButtonsContainer({\n  variables,\n  handlers,\n  numberOfValues,\n}) {\n  const { isSortFinished, startSorting, values } = variables;\n  const {\n    handleValues,\n    handlePreviousValues,\n    handleStartSorting,\n    handleNumberOfValues,\n  } = handlers;\n\n  return (\n    <Center>\n      <Button\n        className={styles.playerButton}\n        onClick={() => handleStartSorting(!startSorting)}\n        colorScheme=\"teal\"\n      >\n        <FontAwesomeIcon icon={getPlayIcon(isSortFinished, startSorting)} />\n      </Button>\n      <Button\n        className={styles.playerButton}\n        onClick={() => {\n          handleStartSorting(false);\n          handlePreviousValues(values);\n          handleValues(getRandomValues(numberOfValues));\n        }}\n        colorScheme=\"teal\"\n      >\n        <FontAwesomeIcon icon={faRandom} />\n      </Button>\n      <Button\n        className={styles.playerButton}\n        onClick={() => {\n          handleStartSorting(false);\n          handlePreviousValues(values);\n          handleValues(getSorted(numberOfValues, SORTED_ARRAY_TYPE.DECREASING));\n        }}\n        colorScheme=\"teal\"\n      >\n        <FontAwesomeIcon icon={faSortAmountDown} />\n      </Button>\n      <Button\n        className={styles.playerButton}\n        onClick={() => {\n          handleStartSorting(false);\n          handlePreviousValues(values);\n          handleValues(getSorted(numberOfValues, SORTED_ARRAY_TYPE.INCREASING));\n        }}\n        colorScheme=\"teal\"\n      >\n        <FontAwesomeIcon icon={faSortAmountUp} />\n      </Button>\n      <Button\n        disabled={numberOfValues === 5}\n        className={styles.playerButton}\n        onClick={() => {\n          handleStartSorting(false);\n          handleNumberOfValues(BAR_NUMBER_ACTIONS.INCREASE);\n        }}\n        colorScheme=\"teal\"\n      >\n        <FontAwesomeIcon icon={faPlus} />\n      </Button>\n      <Button\n        disabled={numberOfValues === 1}\n        className={styles.playerButton}\n        onClick={() => {\n          handleStartSorting(false);\n          handleNumberOfValues(BAR_NUMBER_ACTIONS.DECREASE);\n        }}\n        colorScheme=\"teal\"\n      >\n        <FontAwesomeIcon icon={faMinus} />\n      </Button>\n    </Center>\n  );\n}\n\nPlayerButtonsContainer.propTypes = {\n  variables: PropTypes.shape({\n    isSortFinished: PropTypes.bool.isRequired,\n    startSorting: PropTypes.bool.isRequired,\n    values: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n        value: PropTypes.number.isRequired,\n      }).isRequired,\n    ).isRequired,\n  }).isRequired,\n  numberOfValues: PropTypes.number.isRequired,\n  handlers: PropTypes.shape({\n    handleValues: PropTypes.func.isRequired,\n    handlePreviousValues: PropTypes.func.isRequired,\n    handleStartSorting: PropTypes.func.isRequired,\n    handleNumberOfValues: PropTypes.func.isRequired,\n  }).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Flex } from '@chakra-ui/layout';\n\nimport SortAnimation from 'components/SortAnimation';\nimport PlayerButtonsContainer from './PlayerButtonsContainer';\n\nimport { BAR_NUMBER_ACTIONS } from './constants';\nimport { getRandomValues } from './variables';\n\nimport * as styles from './SortPlayer.module.scss';\n\nexport default function SortPlayer({ algorithm }) {\n  const [startSorting, setStartSorting] = useState(false);\n  const [isSortFinished, setIsSortFinished] = useState(false);\n  const [numberOfValues, setNumberOfValues] = useState(3);\n  const [values, setValues] = useState([]);\n  const [previousValues, setPreviousValues] = useState([]);\n\n  useEffect(() => {\n    setPreviousValues(values?.map((entry) => ({ ...entry, value: 0 })));\n    setValues(getRandomValues(numberOfValues));\n  }, [numberOfValues]);\n\n  const [variables, setVariables] = useState({\n    isSortFinished,\n    startSorting,\n    values,\n  });\n  const handleSortFinish = (sortStatus) => {\n    setIsSortFinished(sortStatus);\n  };\n\n  const handleValues = (newValues) => {\n    setValues(newValues);\n  };\n\n  const handlePreviousValues = (previous) => {\n    setPreviousValues(previous);\n  };\n\n  const handleStartSorting = (action) => {\n    setStartSorting(action);\n  };\n\n  const handleNumberOfValues = (type) => {\n    switch (type) {\n      case BAR_NUMBER_ACTIONS.INCREASE:\n        setNumberOfValues(numberOfValues + 1);\n        break;\n\n      case BAR_NUMBER_ACTIONS.DECREASE:\n        setNumberOfValues(numberOfValues - 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handlers = {\n    handleValues,\n    handlePreviousValues,\n    handleStartSorting,\n    handleNumberOfValues,\n  };\n\n  useEffect(() => {\n    setVariables({\n      isSortFinished,\n      startSorting,\n      values,\n    });\n  }, [isSortFinished, startSorting, values]);\n\n  useEffect(() => {\n    if (startSorting) {\n      setStartSorting(false);\n    }\n  }, [algorithm, values]);\n  return (\n    <>\n      <Box className={styles.cardContainer}>\n        <Box className={styles.animationContainer}>\n          <SortAnimation\n            algorithm={algorithm}\n            startSorting={startSorting}\n            initialValues={values}\n            previousValues={previousValues}\n            handleSortFinish={handleSortFinish}\n          />\n        </Box>\n\n        <Flex justify=\"center\" align=\"center\">\n          <PlayerButtonsContainer\n            variables={variables}\n            handlers={handlers}\n            numberOfValues={numberOfValues}\n          />\n          <Box className={styles.legendContainer}>\n            <Box fontWeight=\"semibold\" as=\"h4\" isTruncated>\n              Legend\n            </Box>\n            {algorithm.legend.map((entry) => (\n              <Flex justify=\"flex-start\" align=\"center\">\n                <Box\n                  style={{\n                    backgroundColor: entry.color,\n                  }}\n                  className={styles.colorPreview}\n                />\n                {entry.message}\n              </Flex>\n            ))}\n          </Box>\n        </Flex>\n      </Box>\n    </>\n  );\n}\n\nSortPlayer.propTypes = {\n  algorithm: PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    legend: PropTypes.arrayOf(\n      PropTypes.shape({\n        color: PropTypes.string.isRequired,\n        message: PropTypes.string.isRequired,\n      }).isRequired,\n    ).isRequired,\n    complexity: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { useState } from 'react';\n\nimport { Box } from '@chakra-ui/layout';\nimport { Button } from '@chakra-ui/react';\n\nimport SortPlayer from 'components/SortPlayer';\nimport { sortAlgorithms } from 'shared/constants';\n\nexport default function SortingsPage() {\n  const [currentAlgorithm, setCurrentAlgorithm] = useState(sortAlgorithms[0]);\n  const [selected, setSelected] = useState('');\n\n  return (\n    <Box as=\"section\">\n      {sortAlgorithms.map((algorithm) => (\n        <Button\n          key={algorithm.key}\n          colorScheme={selected === algorithm.key ? 'blue' : 'teal'}\n          size=\"sm\"\n          marginRight=\"1rem\"\n          onClick={() => {\n            setSelected(algorithm.key);\n            setCurrentAlgorithm(algorithm);\n          }}\n        >\n          {algorithm.name}\n        </Button>\n      ))}\n\n      <SortPlayer algorithm={currentAlgorithm} />\n    </Box>\n  );\n}\n"],"names":["springTransition","type","damping","stiffness","barsContainer4","barsContainer8","barsContainer16","barsContainer32","barsContainer64","li","SortAnimation","algorithm","startSorting","initialValues","previousValues","handleSortFinish","useState","sortBars","setSortBars","timeouts","setTimeouts","handleSetBars","bars","handleSetTimeouts","newTimeouts","useEffect","handlers","sort","forEach","timeout","clearTimeout","className","styles","length","map","bar","motion","key","id","layout","custom","variants","current","previous","i","height","find","value","transition","duration","initial","animate","style","background","color","barColors","colors","constantIds","Array","nanoid","BAR_NUMBER_ACTIONS","SORTED_ARRAY_TYPE","getRandomValues","numberOfValues","elements","level","getElements","_","index","Math","floor","random","getSorted","barA","barB","getPlayIcon","isSortFinished","faRedo","faStop","faPlay","playerButton","PlayerButtonsContainer","variables","values","handleValues","handlePreviousValues","handleStartSorting","handleNumberOfValues","onClick","colorScheme","icon","faRandom","faSortAmountDown","faSortAmountUp","disabled","faPlus","faMinus","SortPlayer","setStartSorting","setIsSortFinished","setNumberOfValues","setValues","setPreviousValues","entry","setVariables","newValues","action","sortStatus","justify","align","fontWeight","as","isTruncated","legend","backgroundColor","message","SortingsPage","sortAlgorithms","currentAlgorithm","setCurrentAlgorithm","selected","setSelected","size","marginRight","name"],"sourceRoot":""}